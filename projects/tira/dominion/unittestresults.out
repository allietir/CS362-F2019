----------------- Testing Card: baron -----------------

-- TEST 1: choice1 = 1 = discard estate, +4 gold --
Test: hand count = 4, expected = 4	Status: SUCCESS
Test: deck count = 4, expected = 5	Status: FAIL
Test: coins = 7, expected = 7		Status: SUCCESS
Test: buys = 1, expected = 2		Status: FAIL
Test: estate supply = 8, expected = 8	Status: SUCCESS

-- TEST 2: choice1 = 1, no estate card in hand --
Test: hand count = 5, expected = 4	Status: FAIL
Test: deck count = 4, expected = 5	Status: FAIL
Test: coins = 3, expected = 7		Status: FAIL
Test: buys = 1, expected = 2		Status: FAIL
Test: estate supply = 6, expected = 8	Status: FAIL

-- TEST 3: choice1 = 0 = do not discard estate, gain an estate --
Test: hand count = 5, expected = 5	Status: SUCCESS
Test: deck count = 4, expected = 5	Status: FAIL
Test: coins = 3, expected = 3		Status: SUCCESS
Test: buys = 1, expected = 2		Status: FAIL
Test: estate supply = 6, expected = 7	Status: FAIL

Tests completed for baron.
5 out of 15 tests passed.

----------------- Testing Card: minion -----------------

-- TEST 1: choice1 = 1 = +2 gold --
Test: deck count = 3, expected = 5	Status: FAIL
Test: coins = 5, expected = 5		Status: SUCCESS
Test: actions = 2, expected = 2		Status: SUCCESS
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 hand count = 0, expected = 0	Status: SUCCESS
Test: player 3 hand count = 0, expected = 0	Status: SUCCESS

-- TEST 2: choice2 = 1, discard hand, redraw 4, no other player has 5 cards --
Test: player 1 hand count = 2, expected = 4	Status: FAIL
Test: player 1 deck count = 0, expected = 1	Status: FAIL
Test: player 1 coins = 3, expected = 3		Status: SUCCESS
Test: player 1 actions = 2, expected = 2		Status: SUCCESS
Test: player 2 hand count = 2, expected = 0	Status: FAIL
Test: player 2 deck count = 8, expected = 10	Status: FAIL
Test: player 3 hand count = 1, expected = 0	Status: FAIL
Test: player 3 deck count = 8, expected = 10	Status: FAIL

-- TEST 3: choice2 = 1, discard hand, redraw 4, all other player has 5 cards --
Test: player 1 hand count = 2, expected = 5	Status: FAIL
Test: player 1 deck count = 0, expected = 5	Status: FAIL
Test: player 1 coins = 3, expected = 3		Status: SUCCESS
Test: player 1 actions = 2, expected = 2		Status: SUCCESS
Test: player 2 hand count = 2, expected = 4	Status: FAIL
Test: layer 2 deck count = 8, expected = 6	Status: FAIL
Test: player 3 hand count = 1, expected = 4	Status: FAIL
Test: layer 3 deck count = 8, expected = 6	Status: FAIL

Tests completed for minion.
9 out of 22 tests passed.

----------------- Testing Card: ambassador -----------------

-- TEST 1: choice1 = 0, choice2 = 0 --
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 12, expected = 12	Status: SUCCESS
Test: choice2 = 0, exit status = -1, expected = 0	Status: FAIL

-- TEST 2: choice1 = 0, choice2 = 1 --
Test: player 1 hand count = 5, expected = 4	Status: FAIL
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 12, expected = 13	Status: FAIL
Test: choice2 = 1, exit status = -1, expected = 0	Status: FAIL

-- TEST 3: choice1 = 0, choice2 = 2 --
Test: player 1 hand count = 5, expected = 3	Status: FAIL
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 12, expected = 14	Status: FAIL
Test: choice2 = 2, exit status = -1, expected = 0	Status: FAIL

-- TEST 4: choice1 = 0, choice2 = 3 --
Test: player 1 hand count = 5, expected = 2	Status: FAIL
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 hand count = 5, expected = 5	Status: SUCCESS
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: player 1 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 12, expected = 15	Status: FAIL
Test: choice2 = 3, exit status = -1, expected = -1	Status: SUCCESS

-- TEST 5: choice1 = 1, choice2 = 0 --
Test: player 1 hand count = 4, expected = 5	Status: FAIL
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 discard count = 1, expected = 1	Status: SUCCESS
Test: player 2 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 37, expected = 39	Status: FAIL
Test: choice2 = 0, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 6: choice1 = 1, choice2 = 1 --
Test: player 1 hand count = 3, expected = 4	Status: FAIL
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 discard count = 1, expected = 1	Status: SUCCESS
Test: player 2 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 37, expected = 40	Status: FAIL
Test: choice2 = 1, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 7: choice1 = 1, choice2 = 2 --
Test: player 1 hand count = 5, expected = 3	Status: FAIL
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 discard count = 0, expected = 1	Status: FAIL
Test: player 2 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 41	Status: FAIL
Test: choice2 = 2, exit status = -1, expected = 0	Status: FAIL

-- TEST 8: choice1 = 1, choice2 = 3 --
Test: player 1 hand count = 5, expected = 2	Status: FAIL
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 hand count = 5, expected = 5	Status: SUCCESS
Test: player 2 discard count = 0, expected = 1	Status: FAIL
Test: player 2 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 42	Status: FAIL
Test: choice2 = 3, exit status = -1, expected = -1	Status: SUCCESS

-- TEST 9: choice1 = 2, choice2 = 0 --
Test: player 1 hand count = 4, expected = 5	Status: FAIL
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 discard count = 1, expected = 1	Status: SUCCESS
Test: player 3 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 37, expected = 39	Status: FAIL
Test: choice2 = 0, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 10: choice1 = 2, choice2 = 1 --
Test: player 1 hand count = 3, expected = 4	Status: FAIL
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 discard count = 1, expected = 1	Status: SUCCESS
Test: player 3 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 37, expected = 40	Status: FAIL
Test: choice2 = 1, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 11: choice1 = 2, choice2 = 2 --
Test: player 1 hand count = 5, expected = 3	Status: FAIL
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 discard count = 0, expected = 1	Status: FAIL
Test: player 3 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 41	Status: FAIL
Test: choice2 = 2, exit status = -1, expected = 0	Status: FAIL

-- TEST 12: choice1 = 2, choice2 = 3 --
Test: player 1 hand count = 5, expected = 2	Status: FAIL
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 hand count = 5, expected = 5	Status: SUCCESS
Test: player 3 discard count = 0, expected = 1	Status: FAIL
Test: player 3 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 42	Status: FAIL
Test: choice2 = 3, exit status = -1, expected = -1	Status: SUCCESS

-- TEST 13: choice1 = 3, choice2 = 0 --
Test: player 1 hand count = 4, expected = 5	Status: FAIL
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 discard count = 1, expected = 1	Status: SUCCESS
Test: player 4 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 10, expected = 12	Status: FAIL
Test: choice2 = 0, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 14: choice1 = 3, choice2 = 1 --
Test: player 1 hand count = 3, expected = 4	Status: FAIL
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 discard count = 1, expected = 1	Status: SUCCESS
Test: player 4 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 10, expected = 13	Status: FAIL
Test: choice2 = 1, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 15: choice1 = 3, choice2 = 2 --
Test: player 1 hand count = 5, expected = 3	Status: FAIL
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 discard count = 0, expected = 1	Status: FAIL
Test: player 4 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 12, expected = 14	Status: FAIL
Test: choice2 = 2, exit status = -1, expected = 0	Status: FAIL

-- TEST 16: choice1 = 3, choice2 = 3 --
Test: player 1 hand count = 5, expected = 2	Status: FAIL
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 hand count = 5, expected = 5	Status: SUCCESS
Test: player 4 discard count = 0, expected = 1	Status: FAIL
Test: player 4 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 12, expected = 15	Status: FAIL
Test: choice2 = 3, exit status = -1, expected = -1	Status: SUCCESS

-- TEST 17: choice1 = 4, choice2 = 0 --
Test: player 1 hand count = 4, expected = 5	Status: FAIL
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 discard count = 1, expected = 1	Status: SUCCESS
Test: player 5 discard count = 1, expected = 1	Status: SUCCESS
Test: supply count = 37, expected = 39	Status: FAIL
Test: choice2 = 0, exit status = 0, expected = 0	Status: SUCCESS

-- TEST 18: choice1 = 4, choice2 = 1 --
Test: player 1 hand count = 5, expected = 4	Status: FAIL
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 discard count = 0, expected = 1	Status: FAIL
Test: player 5 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 40	Status: FAIL
Test: choice2 = 1, exit status = -1, expected = 0	Status: FAIL

-- TEST 19: choice1 = 4, choice2 = 2 --
Test: player 1 hand count = 5, expected = 3	Status: FAIL
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 discard count = 0, expected = 1	Status: FAIL
Test: player 5 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 41	Status: FAIL
Test: choice2 = 2, exit status = -1, expected = 0	Status: FAIL

-- TEST 20: choice1 = 4, choice2 = 3 --
Test: player 1 hand count = 5, expected = 2	Status: FAIL
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 hand count = 5, expected = 5	Status: SUCCESS
Test: player 5 discard count = 0, expected = 1	Status: FAIL
Test: player 5 discard count = 0, expected = 1	Status: FAIL
Test: supply count = 39, expected = 42	Status: FAIL
Test: choice2 = 3, exit status = -1, expected = -1	Status: SUCCESS

Tests completed for ambassador.
68 out of 140 tests passed.

----------------- Testing Card: tribute -----------------

-- TEST 1: nextPlayer deck count = 10, 1st card = treasure, 2nd card = treasure --
Test: currentPlayer hand count = 7, expected = 5	Status: FAIL
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 1		Status: FAIL
Test: nextPlayer deck count = 6, expected = 8		Status: FAIL

-- TEST 2: nextPlayer deck count = 10, 1st card = treasure, 2nd card = victory --
Test: currentPlayer hand count = 7, expected = 7	Status: SUCCESS
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 1		Status: FAIL
Test: nextPlayer deck count = 6, expected = 8		Status: FAIL

-- TEST 3: nextPlayer deck count = 10, 1st card = treasure, 2nd card = action --
Test: currentPlayer hand count = 7, expected = 5	Status: FAIL
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 3		Status: FAIL
Test: nextPlayer deck count = 6, expected = 8		Status: FAIL

-- TEST 4: nextPlayer deck count = 10, 1st card = victory, 2nd card = victory --
Test: currentPlayer hand count = 9, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 1		Status: FAIL
Test: nextPlayer deck count = 6, expected = 8		Status: FAIL

-- TEST 5: nextPlayer deck count = 10, 1st card = victory, 2nd card = action --
Test: currentPlayer hand count = 9, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 3		Status: FAIL
Test: nextPlayer deck count = 6, expected = 8		Status: FAIL

-- TEST 6: nextPlayer deck count = 10, 1st card = action, 2nd card = action --
Test: currentPlayer hand count = 9, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 3		Status: FAIL
Test: nextPlayer deck count = 6, expected = 8		Status: FAIL

-- TEST 7: nextPlayer deck count = 1, 1st card = treasure, 2nd card = treasure --
Test: currentPlayer hand count = 9, expected = 5	Status: FAIL
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = -3, expected = 4		Status: FAIL

-- TEST 8: nextPlayer deck count = 1, 1st card = treasure, 2nd card = victory --
Test: currentPlayer hand count = 9, expected = 7	Status: FAIL
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = -3, expected = 4		Status: FAIL

-- TEST 9: nextPlayer deck count = 1, 1st card = treasure, 2nd card = action --
Test: currentPlayer hand count = 9, expected = 5	Status: FAIL
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = -3, expected = 4		Status: FAIL

-- TEST 10: nextPlayer deck count = 1, 1st card = victory, 2nd card = victory --
Test: currentPlayer hand count = 9, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 1		Status: FAIL
Test: nextPlayer deck count = -3, expected = 4		Status: FAIL

-- TEST 11: nextPlayer deck count = 1, 1st card = victory, 2nd card = action --
Test: currentPlayer hand count = 9, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 3		Status: FAIL
Test: nextPlayer deck count = -3, expected = 4		Status: FAIL

-- TEST 12: nextPlayer deck count = 1, 1st card = action, 2nd card = action --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = -3, expected = 4		Status: FAIL

-- TEST 13: nextPlayer deck count = 0, 1st card = treasure, 2nd card = treasure --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 5		Status: FAIL
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = -1, expected = 3		Status: FAIL

-- TEST 14: nextPlayer deck count = 0, 1st card = treasure, 2nd card = victory --
Test: currentPlayer hand count = 10, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 5		Status: FAIL
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = -1, expected = 3		Status: FAIL

-- TEST 15: nextPlayer deck count = 0, 1st card = treasure, 2nd card = action --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 5		Status: FAIL
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = -1, expected = 3		Status: FAIL

-- TEST 16: nextPlayer deck count = 0, 1st card = victory, 2nd card = victory --
Test: currentPlayer hand count = 10, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = -1, expected = 3		Status: FAIL

-- TEST 17: nextPlayer deck count = 0, 1st card = victory, 2nd card = action --
Test: currentPlayer hand count = 10, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = -1, expected = 3		Status: FAIL

-- TEST 18: nextPlayer deck count = 0, 1st card = action, 2nd card = action --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = -1, expected = 3		Status: FAIL

-- TEST 19: nextPlayer deck count = 0, discard count = 1, 1st card = treasure --
Test: currentPlayer hand count = 9, expected = 5	Status: FAIL
Test: currentPlayer coins = 5, expected = 5		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = 0, expected = 0		Status: SUCCESS

-- TEST 20: nextPlayer deck count = 0, discard count = 1, 1st card = victory --
Test: currentPlayer hand count = 9, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 2, expected = 1		Status: FAIL
Test: nextPlayer deck count = 0, expected = 0		Status: SUCCESS

-- TEST 21: nextPlayer deck count = 0, discard count = 1, 1st card = action --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = 0, expected = 0		Status: SUCCESS

-- TEST 22: nextPlayer deck count = 1, discard count = 0, 1st card = treasure --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 5		Status: FAIL
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = 0, expected = 0		Status: SUCCESS

-- TEST 23: nextPlayer deck count = 1, discard count = 0, 1st card = victory --
Test: currentPlayer hand count = 10, expected = 7	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 1		Status: SUCCESS
Test: nextPlayer deck count = 0, expected = 0		Status: SUCCESS

-- TEST 24: nextPlayer deck count = 1, discard count = 0, 1st card = action --
Test: currentPlayer hand count = 10, expected = 5	Status: FAIL
Test: currentPlayer coins = 3, expected = 3		Status: SUCCESS
Test: currentPlayer actions = 1, expected = 3		Status: FAIL
Test: nextPlayer deck count = 0, expected = 0		Status: SUCCESS

Tests completed for tribute.
35 out of 96 tests passed.

----------------- Testing Card: mine -----------------

-- TEST 1: discard = copper, gain = silver --
Test: hand count = 5, expected = 5	Status: SUCCESS
Test: deck count = 5, expected = 5	Status: SUCCESS
Test: copper supply = 46, expected = 46	Status: SUCCESS
Test: silver supply = 40, expected = 39	Status: FAIL
Test: exit status = -1, expected = 0	Status: FAIL

-- TEST 2: discard = copper, gain = gold --
Test: copper supply = 46, expected = 46	Status: SUCCESS
Test: gold supply = 30, expected = 30	Status: SUCCESS
Test: exit status = -1, expected = -1	Status: SUCCESS

-- TEST 3: discard = silver, gain = copper --
Test: copper supply = 46, expected = 45	Status: FAIL
Test: silver supply = 40, expected = 40	Status: SUCCESS
Test: exit status = 0, expected = 0	Status: SUCCESS

-- TEST 4: discard = adventurer, gain = copper --
Test: copper supply = 46, expected = 46	Status: SUCCESS
Test: exit status = -1, expected = -1	Status: SUCCESS

-- TEST 5: discard = copper, gain = adventurer --
Test: copper supply = 10, expected = 10	Status: SUCCESS
Test: copper supply = 46, expected = 46	Status: SUCCESS
Test: exit status = -1, expected = -1	Status: SUCCESS

Tests completed for mine.
13 out of 16 tests passed.

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:76.92% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:22.22% of 135
Branches executed:31.96% of 97
Taken at least once:13.40% of 97
Calls executed:29.55% of 44

Function 'mineRefactor'
Lines executed:81.25% of 16
Branches executed:100.00% of 14
Taken at least once:71.43% of 14
Calls executed:83.33% of 6

Function 'tributeRefactor'
Lines executed:92.11% of 38
Branches executed:100.00% of 32
Taken at least once:71.88% of 32
Calls executed:100.00% of 4

Function 'ambassadorRefactor'
Lines executed:95.45% of 22
Branches executed:100.00% of 24
Taken at least once:91.67% of 24
Calls executed:100.00% of 4

Function 'minionRefactor'
Lines executed:100.00% of 19
Branches executed:100.00% of 18
Taken at least once:88.89% of 18
Calls executed:100.00% of 7

Function 'baronRefactor'
Lines executed:93.10% of 29
Branches executed:100.00% of 18
Taken at least once:77.78% of 18
Calls executed:77.78% of 9

Function 'getCost'
Lines executed:16.67% of 30
Branches executed:100.00% of 28
Taken at least once:10.71% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:93.55% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:48.05% of 589
Branches executed:59.14% of 421
Taken at least once:40.86% of 421
Calls executed:50.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7: 
function compare called 444 returned 100% blocks executed 83%
      444:    8:int compare(const void* a, const void* b) {
      444:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
      444:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      112:   12:        return -1;
      332:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 94%
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       11:   44:    SelectStream(1);
call    0 returned 100%
       11:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
       11:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       11:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      121:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1210:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       11:   73:    if (numPlayers == 2)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:   74:    {
        5:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
        6:   77:    else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        6:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       11:   87:    if (numPlayers == 2)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:   88:    {
        5:   89:        state->supplyCount[estate] = 8;
        5:   90:        state->supplyCount[duchy] = 8;
        5:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
        6:   95:        state->supplyCount[estate] = 12;
        6:   96:        state->supplyCount[duchy] = 12;
        6:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       11:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:    state->supplyCount[silver] = 40;
       11:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      231:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1815:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
     1705:  110:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      110:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:                {
       44:  115:                    if (numPlayers == 2) {
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
       10:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
       12:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
       88:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      110:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     1595:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
       39:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  141:    {
       28:  142:        state->deckCount[i] = 0;
      112:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
       84:  145:            state->deck[i][j] = estate;
       84:  146:            state->deckCount[i]++;
        -:  147:        }
      224:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
      196:  150:            state->deck[i][j] = copper;
      196:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
       39:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  157:    {
       28:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
       39:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
       28:  168:        state->handCount[i] = 0;
       28:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      308:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
      297:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       11:  184:    state->outpostPlayed = 0;
       11:  185:    state->phase = 0;
       11:  186:    state->numActions = 1;
       11:  187:    state->numBuys = 1;
       11:  188:    state->playedCardCount = 0;
       11:  189:    state->whoseTurn = 0;
       11:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
       66:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
       11:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
       11:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 74 returned 100% blocks executed 100%
       74:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
       74:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
       74:  211:    if (state->deckCount[player] < 1)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
       34:  212:        return -1;
       40:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      396:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      316:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      316:  218:        newDeck[newDeckPos] = state->deck[player][card];
      316:  219:        newDeckPos++;
      829:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 62%
branch  1 taken 38% (fallthrough)
      513:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
      316:  223:        state->deckCount[player]--;
        -:  224:    }
      356:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      316:  226:        state->deck[player][i] = newDeck[i];
      316:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
       40:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 20 returned 100% blocks executed 100%
       20:  313:int numHandCards(struct gameState *state) {
       20:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 71 returned 100% blocks executed 100%
       71:  322:int supplyCount(int card, struct gameState *state) {
       71:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 298 returned 100% blocks executed 100%
      298:  348:int whoseTurn(struct gameState *state) {
      298:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 347 returned 100% blocks executed 85%
      347:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
      347:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
       34:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
       34:  576:        state->deckCount[player] = state->discardCount[player];
       34:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
       34:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
       34:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
       34:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
       34:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
       34:  597:        if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       34:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
      313:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
      313:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
      313:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      313:  614:        state->deckCount[player]--;
      313:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
      313:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 6 returned 100% blocks executed 17%
        6:  621:int getCost(int cardNumber)
        -:  622:{
        6:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 33%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        3:  634:        return 0;
        -:  635:    case silver:
        2:  636:        return 3;
        -:  637:    case gold:
        1:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
function baronRefactor called 16 returned 100% blocks executed 93%
       16:  684:int baronRefactor(int card, int choice1, struct gameState *state){
       16:  685:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  686:
        -:  687:    /*Bug 1 added: expected behavior is that the card will appear to resolve normally 
        -:  688:    according to the chosen effects. However, the player's number of buys will not increase by 1.*/
        -:  689:    //state->numBuys++;//Increase buys by 1!
       16:  690:    if (choice1 > 0) { //Boolean true for going to discard an estate
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        4:  691:        int p = 0;//Iterator for hand!
        4:  692:        int card_not_discarded = 1;//Flag for discard set!
       24:  693:        while(card_not_discarded) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       16:  694:            if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        2:  695:                state->coins += 4;//Add 4 coins to the amount of coins
        2:  696:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        2:  697:                state->discardCount[currentPlayer]++;
       12:  698:                for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  699:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  700:                }
        2:  701:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        2:  702:                state->handCount[currentPlayer]--;
        2:  703:                card_not_discarded = 0;//Exit the loop
        -:  704:            }
       14:  705:            else if (p > state->handCount[currentPlayer]) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  706:                if(DEBUG) {
        -:  707:                    printf("No estate cards in your hand, invalid choice\n");
        -:  708:                    printf("Must gain an estate if there are any\n");
        -:  709:                }
        2:  710:                if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  711:                    gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        -:  712:
        2:  713:                    state->supplyCount[estate]--;//Decrement estates
        2:  714:                    if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  715:                        isGameOver(state);
call    0 never executed
        -:  716:                    }
        -:  717:                }
        2:  718:                card_not_discarded = 0;//Exit the loop
        -:  719:            }
        -:  720:
        -:  721:            else {
        -:  722:                /*Bug 2 added: expected behavior is that only the first card in hand will be checked.
        -:  723:                In most cases, this will result in an infinite loop unless the first card is an estate
        -:  724:                card or there is only 1 card in hand.*/
        -:  725:                //ASSIGNMENT 3 - getting rid of potential infinite loop so that this may be run
       12:  726:                p++;//Next card
        -:  727:            }
        -:  728:        }
        -:  729:    }
        -:  730:
        -:  731:     else {
       12:  732:        if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       12:  733:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -:  734:
       12:  735:            state->supplyCount[estate]--;//Decrement Estates
       12:  736:            if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  737:                isGameOver(state);
call    0 never executed
        -:  738:            }
        -:  739:        }
        -:  740:    }
        -:  741:
        -:  742:
       16:  743:    return 0;
        -:  744:}
        -:  745:
function minionRefactor called 6 returned 100% blocks executed 100%
        6:  746:int minionRefactor(int choice1, int choice2, struct gameState *state, int handPos){
        -:  747:    int i;
        -:  748:    int j;
        6:  749:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  750:
        -:  751:    //+1 action
        6:  752:    state->numActions++;
        -:  753:
        -:  754:    //discard card from hand
        6:  755:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  756:
        6:  757:    if (choice1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  758:    {
        2:  759:        state->coins = state->coins + 2;
        -:  760:    }
        4:  761:    else if (choice2)       //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  762:    {
        -:  763:        //discard hand
       24:  764:        while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        -:  765:        {
       16:  766:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  767:        }
        -:  768:
        -:  769:        //draw 4
       20:  770:        for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  771:        {
       16:  772:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  773:        }
        -:  774:
        -:  775:        //other players discard hand and redraw if hand size > 4
       16:  776:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  777:        {
       12:  778:            if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  779:            {
        -:  780:                /*Bug 3 added: changed = to >=, expected behavior is that intead of players with at least 5 cards
        -:  781:                in hand, it will be players with at least 4 cards in hand that will be affected by the discard.*/
        8:  782:                if ( state->handCount[i] >= 4 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  783:                {
        -:  784:                    //discard hand
       56:  785:                    while( state->handCount[i] > 0 )
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  786:                    {
       40:  787:                        discardCard(handPos, i, state, 0);
call    0 returned 100%
        -:  788:                    }
        -:  789:
        -:  790:                    //draw 4
       40:  791:                    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  792:                    {
        -:  793:                        /*Bug 4 added: changed i to j, expected behavior is that the incorrect player will draw
        -:  794:                        a card, and the same player won't draw a card twice in a row. This is also expected to
        -:  795:                        produce an error when there are less than 4 players.*/
       32:  796:                        drawCard(j, state);
call    0 returned 100%
        -:  797:                    }
        -:  798:                }
        -:  799:            }
        -:  800:        }
        -:  801:
        -:  802:    }
        6:  803:    return 0;
        -:  804:}
        -:  805:
function ambassadorRefactor called 88 returned 100% blocks executed 97%
       88:  806:int ambassadorRefactor(int choice1, int choice2, struct gameState *state, int handPos){
       88:  807:    int j = 0;      //used to check if player has enough cards to discard
        -:  808:    int i;
       88:  809:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  810:
        -:  811:    /*Bug 5 added: removed "choice2 > 2 ||" from the if statement. Expected behavior is that a player can
        -:  812:    select up to any number of copies of the same card, though they still cannot select a negative number of cards.
        -:  813:    This may also affect how the rest of the card resolves.*/
       88:  814:    if (choice2 < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  815:    {
    #####:  816:        return -1;
        -:  817:    }
        -:  818:
       88:  819:    if (choice1 == handPos)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:  820:    {
       56:  821:        return -1;
        -:  822:    }
        -:  823:
      192:  824:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  825:    {
      160:  826:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
branch  4 taken 75% (fallthrough)
branch  5 taken 25%
        -:  827:        {
       24:  828:            j++;
        -:  829:        }
        -:  830:    }
       32:  831:    if (j < choice2)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  832:    {
       18:  833:        return -1;
        -:  834:    }
        -:  835:
        -:  836:    if (DEBUG)
        -:  837:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  838:
        -:  839:    /*Bug 6 added: expected behavior is that the card(s) will be discarded but
        -:  840:    they will not return to the supply, therefore unaffected the supply count.*/
        -:  841:    //increase supply count for choosen card by amount being discarded
        -:  842:    //state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  843:
        -:  844:    
       56:  845:    for (i = 0; i < state->numPlayers; i++)//each other player gains a copy of revealed card
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  846:    {
       42:  847:        if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  848:        {
       28:  849:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        -:  850:        }
        -:  851:    }
        -:  852:
        -:  853:    //discard played card from hand
       14:  854:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  855:
        -:  856:    //trash copies of cards returned to supply
       20:  857:    for (j = 0; j < choice2; j++)
branch  0 taken 30%
branch  1 taken 70% (fallthrough)
        -:  858:    {
       12:  859:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  860:        {
       12:  861:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  862:            {
        6:  863:                discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        6:  864:                break;
        -:  865:            }
        -:  866:        }
        -:  867:    }
        -:  868:
       14:  869:    return 0;
        -:  870:}
        -:  871:
function tributeRefactor called 48 returned 100% blocks executed 94%
       48:  872:int tributeRefactor(struct gameState *state, int handPos){
        -:  873:    int i;
       48:  874:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       48:  875:    int nextPlayer = currentPlayer + 1;
       48:  876:    int tributeRevealedCards[2] = {-1, -1};
        -:  877:
       48:  878:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  879:        nextPlayer = 0;
        -:  880:    }
        -:  881:
       48:  882:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       12:  883:        if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  884:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:            state->deckCount[nextPlayer]--;
        -:  886:        }
       12:  887:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12:  888:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       12:  889:            state->discardCount[nextPlayer]--;
        -:  890:        }
        -:  891:        else {
        -:  892:            //No Card to Reveal
        -:  893:            if (DEBUG) {
        -:  894:                printf("No cards to reveal\n");
        -:  895:            }
        -:  896:        }
        -:  897:    }
        -:  898:
        -:  899:    else {
       36:  900:        if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       48:  901:            for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       36:  902:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
       36:  903:                state->deckCount[nextPlayer]++;
       36:  904:                state->discard[nextPlayer][i] = -1;
       36:  905:                state->discardCount[nextPlayer]--;
        -:  906:            }
        -:  907:
        -:  908:            /*ASSIGNMENT 3 - As a unit testing strategy, by disabling the call to shuffle() in tributeRefactor, 
        -:  909:            we can test with expected knowledge of the top card after the discard is "shuffled" back into the deck.
        -:  910:            This allows us to test this tributeRefactor() function in isolation, since we are not testing the
        -:  911:            shuffle() function.*/
       12:  912:            shuffle(nextPlayer,state);//Shuffle the deck
call    0 returned 100%
        -:  913:        }
       36:  914:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       36:  915:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       36:  916:        state->deckCount[nextPlayer]--;
       36:  917:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       36:  918:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       36:  919:        state->deckCount[nextPlayer]--;
        -:  920:    }
        -:  921:
       48:  922:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       16:  923:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       16:  924:        state->playedCardCount++;
       16:  925:        tributeRevealedCards[1] = -1;
        -:  926:    }
        -:  927:
      192:  928:    for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      144:  929:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 10% (fallthrough)
branch  5 taken 90%
       14:  930:            state->coins += 2;
        -:  931:        }
        -:  932:
        -:  933:        /*Bug 7 added: added a negation "!" in front of the if statement, expected behavior is that if the revealed
        -:  934:        cards are not any of these victory cards, then the player will draw 2 cards. If the revealed cards are one
        -:  935:        of these victory cards, then the player will not draw any cards.*/
      130:  936:        else if (!(tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)) 
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        -:  937:        { //Victory Card Found
      112:  938:            drawCard(currentPlayer, state);
call    0 returned 100%
      112:  939:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  940:        }
        -:  941:        /*Bug 8 added: removed "= state->numActions + 2" and changed it to "++", expected behavior is that if an action card is revealed
        -:  942:        it will add 1 action instead of 2.*/
        -:  943:        else { //Action Card
       18:  944:            state->numActions++;
        -:  945:        }
        -:  946:    }
        -:  947:
       48:  948:    return 0;
        -:  949:}
        -:  950:
function mineRefactor called 5 returned 100% blocks executed 86%
        5:  951:int mineRefactor(int choice1, int choice2, struct gameState *state, int handPos)
        -:  952:{
        -:  953:    int i;
        -:  954:    int j;
        5:  955:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  956:
        5:  957:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  958:
        5:  959:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 40% (fallthrough)
branch  3 taken 60%
        -:  960:        {
        2:  961:            return -1;
        -:  962:        }
        -:  963:
        3:  964:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  965:        {
    #####:  966:            return -1;
        -:  967:        }
        -:  968:
        -:  969:        /*Bug 9 added: removed "+ 3" from if statement. Expected behavior is that the player
        -:  970:        will only be able to gain a treasure of lesser or equal value from the trashed card.*/
        3:  971:        if ( (getCost(state->hand[currentPlayer][choice1]) ) < getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        -:  972:        {
        2:  973:            return -1;
        -:  974:        }
        -:  975:
        -:  976:        /*Bug 10 added: changed choice2 to choice1, expected behavior is that the player
        -:  977:        will gain the same card they chose to trash.*/
        1:  978:        gainCard(choice1, state, 2, currentPlayer);
call    0 returned 100%
        -:  979:
        -:  980:        //discard card from hand
        1:  981:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  982:
        -:  983:        //discard trashed card
        6:  984:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  985:        {
        5:  986:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  987:            {
    #####:  988:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:                break;
        -:  990:            }
        -:  991:        }
        -:  992:
        1:  993:        return 0;
        -:  994:}
        -:  995:
function cardEffect called 115 returned 100% blocks executed 18%
      115:  996:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  997:{
        -:  998:    int i;
        -:  999:    int j;
        -: 1000:    int k;
        -: 1001:    int x;
        -: 1002:    int index;
      115: 1003:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
      115: 1004:    int nextPlayer = currentPlayer + 1;
        -: 1005:
        -: 1006:    //int tributeRevealedCards[2] = {-1, -1};
        -: 1007:    int temphand[MAX_HAND];// moved above the if statement
      115: 1008:    int drawntreasure=0;
        -: 1009:    int cardDrawn;
      115: 1010:    int z = 0;// this is the counter for the temp hand
      115: 1011:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1012:        nextPlayer = 0;
        -: 1013:    }
        -: 1014:
        -: 1015:    //ASSIGNMENT 3 - used for catching function return values for unit testing
        -: 1016:    int result;
        -: 1017:
        -: 1018:    //uses switch to select card and perform actions
      115: 1019:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 4%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 14%
branch  9 taken 0%
branch 10 taken 5%
branch 11 taken 0%
branch 12 taken 42%
branch 13 taken 35%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -: 1020:    {
        -: 1021:    case adventurer:
    #####: 1022:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####: 1023:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1024:                shuffle(currentPlayer, state);
call    0 never executed
        -: 1025:            }
    #####: 1026:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1027:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1028:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1029:                drawntreasure++;
        -: 1030:            else {
    #####: 1031:                temphand[z]=cardDrawn;
    #####: 1032:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1033:                z++;
        -: 1034:            }
        -: 1035:        }
    #####: 1036:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####: 1037:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1038:            z=z-1;
        -: 1039:        }
    #####: 1040:        return 0;
        -: 1041:
        -: 1042:    case council_room:
        -: 1043:        //+4 Cards
    #####: 1044:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1045:        {
    #####: 1046:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1047:        }
        -: 1048:
        -: 1049:        //+1 Buy
    #####: 1050:        state->numBuys++;
        -: 1051:
        -: 1052:        //Each other player draws a card
    #####: 1053:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1054:        {
    #####: 1055:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1056:            {
    #####: 1057:                drawCard(i, state);
call    0 never executed
        -: 1058:            }
        -: 1059:        }
        -: 1060:
        -: 1061:        //put played card in played card pile
    #####: 1062:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1063:
    #####: 1064:        return 0;
        -: 1065:
        -: 1066:    case feast:
        -: 1067:        //gain card with cost up to 5
        -: 1068:        //Backup hand
    #####: 1069:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1070:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1071:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1072:        }
        -: 1073:        //Backup hand
        -: 1074:
        -: 1075:        //Update Coins for Buy
    #####: 1076:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1077:        x = 1;//Condition to loop on
    #####: 1078:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1079:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1080:                if (DEBUG)
        -: 1081:                    printf("None of that card left, sorry!\n");
        -: 1082:
        -: 1083:                if (DEBUG) {
        -: 1084:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1085:                }
        -: 1086:            }
    #####: 1087:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1088:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1089:
        -: 1090:                if (DEBUG) {
        -: 1091:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1092:                }
        -: 1093:            }
        -: 1094:            else {
        -: 1095:
        -: 1096:                if (DEBUG) {
        -: 1097:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1098:                }
        -: 1099:
    #####: 1100:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1101:                x = 0;//No more buying cards
        -: 1102:
        -: 1103:                if (DEBUG) {
        -: 1104:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1105:                }
        -: 1106:
        -: 1107:            }
        -: 1108:        }
        -: 1109:
        -: 1110:        //Reset Hand
    #####: 1111:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1112:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1113:            temphand[i] = -1;
        -: 1114:        }
        -: 1115:        //Reset Hand
        -: 1116:
    #####: 1117:        return 0;
        -: 1118:
        -: 1119:    case gardens:
    #####: 1120:        return -1;
        -: 1121:
        -: 1122:    case mine:
        5: 1123:        result = mineRefactor(choice1, choice2, state, handPos);
call    0 returned 100%
        5: 1124:        if (result == -1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4: 1125:            return -1;
        -: 1126:        else 
        1: 1127:            return 0;
        -: 1128:
        -: 1129:    case remodel:
    #####: 1130:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1131:
    #####: 1132:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:        {
    #####: 1134:            return -1;
        -: 1135:        }
        -: 1136:
    #####: 1137:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1138:
        -: 1139:        //discard card from hand
    #####: 1140:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1141:
        -: 1142:        //discard trashed card
    #####: 1143:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1148:                break;
        -: 1149:            }
        -: 1150:        }
        -: 1151:
        -: 1152:
    #####: 1153:        return 0;
        -: 1154:
        -: 1155:    case smithy:
        -: 1156:        //+3 Cards
    #####: 1157:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:        {
    #####: 1159:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1160:        }
        -: 1161:
        -: 1162:        //discard card from hand
    #####: 1163:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:        return 0;
        -: 1165:
        -: 1166:    case village:
        -: 1167:        //+1 Card
    #####: 1168:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1169:
        -: 1170:        //+2 Actions
    #####: 1171:        state->numActions = state->numActions + 2;
        -: 1172:
        -: 1173:        //discard played card from hand
    #####: 1174:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1175:        return 0;
        -: 1176:
        -: 1177:    case baron:
       16: 1178:        baronRefactor(card, choice1, state);
call    0 returned 100%
        -: 1179:        
        -: 1180:    case great_hall:
        -: 1181:        //+1 Card
       16: 1182:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1183:
        -: 1184:        //+1 Actions
       16: 1185:        state->numActions++;
        -: 1186:
        -: 1187:        //discard card from hand
       16: 1188:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       16: 1189:        return 0;
        -: 1190:
        -: 1191:    case minion:
        6: 1192:        minionRefactor(choice1, choice2, state, handPos);
call    0 returned 100%
        -: 1193:
        -: 1194:    case steward:
        6: 1195:        if (choice1 == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1196:        {
        -: 1197:            //+2 cards
        2: 1198:            drawCard(currentPlayer, state);
call    0 returned 100%
        2: 1199:            drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1200:        }
        4: 1201:        else if (choice1 == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1202:        {
        -: 1203:            //+2 coins
    #####: 1204:            state->coins = state->coins + 2;
        -: 1205:        }
        -: 1206:        else
        -: 1207:        {
        -: 1208:            //trash 2 cards in hand
        4: 1209:            discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        4: 1210:            discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1211:        }
        -: 1212:
        -: 1213:        //discard card from hand
        6: 1214:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6: 1215:        return 0;
        -: 1216:
        -: 1217:    case tribute:
       48: 1218:        tributeRefactor(state, handPos);       
call    0 returned 100%
        -: 1219:
        -: 1220:    case ambassador:
       88: 1221:        result = ambassadorRefactor(choice1, choice2, state, handPos);
call    0 returned 100%
       88: 1222:        if (result == -1)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
       74: 1223:            return -1;
        -: 1224:        else 
       14: 1225:            return 0;
        -: 1226:
        -: 1227:    case cutpurse:
        -: 1228:
    #####: 1229:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1230:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:        {
    #####: 1232:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1233:            {
    #####: 1234:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1235:                {
    #####: 1236:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1237:                    {
    #####: 1238:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1239:                        break;
        -: 1240:                    }
    #####: 1241:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1242:                    {
    #####: 1243:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1244:                        {
        -: 1245:                            if (DEBUG)
        -: 1246:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1247:                        }
    #####: 1248:                        break;
        -: 1249:                    }
        -: 1250:                }
        -: 1251:
        -: 1252:            }
        -: 1253:
        -: 1254:        }
        -: 1255:
        -: 1256:        //discard played card from hand
    #####: 1257:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1258:
    #####: 1259:        return 0;
        -: 1260:
        -: 1261:
        -: 1262:    case embargo:
        -: 1263:        //+2 Coins
    #####: 1264:        state->coins = state->coins + 2;
        -: 1265:
        -: 1266:        //see if selected pile is in play
    #####: 1267:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1268:        {
    #####: 1269:            return -1;
        -: 1270:        }
        -: 1271:
        -: 1272:        //add embargo token to selected supply pile
    #####: 1273:        state->embargoTokens[choice1]++;
        -: 1274:
        -: 1275:        //trash card
    #####: 1276:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1277:        return 0;
        -: 1278:
        -: 1279:    case outpost:
        -: 1280:        //set outpost flag
    #####: 1281:        state->outpostPlayed++;
        -: 1282:
        -: 1283:        //discard card
    #####: 1284:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1285:        return 0;
        -: 1286:
        -: 1287:    case salvager:
        -: 1288:        //+1 buy
    #####: 1289:        state->numBuys++;
        -: 1290:
    #####: 1291:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1292:        {
        -: 1293:            //gain coins equal to trashed card
    #####: 1294:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1295:            //trash card
    #####: 1296:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1297:        }
        -: 1298:
        -: 1299:        //discard card
    #####: 1300:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1301:        return 0;
        -: 1302:
        -: 1303:    case sea_hag:
    #####: 1304:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1305:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1306:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1307:                state->deckCount[i]--;
    #####: 1308:                state->discardCount[i]++;
    #####: 1309:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1310:            }
        -: 1311:        }
    #####: 1312:        return 0;
        -: 1313:
        -: 1314:    case treasure_map:
        -: 1315:        //search hand for another treasure_map
    #####: 1316:        index = -1;
    #####: 1317:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1318:        {
    #####: 1319:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1320:            {
    #####: 1321:                index = i;
    #####: 1322:                break;
        -: 1323:            }
        -: 1324:        }
    #####: 1325:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1326:        {
        -: 1327:            //trash both treasure cards
    #####: 1328:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1330:
        -: 1331:            //gain 4 Gold cards
    #####: 1332:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:            {
    #####: 1334:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1335:            }
        -: 1336:
        -: 1337:            //return success
    #####: 1338:            return 1;
        -: 1339:        }
        -: 1340:
        -: 1341:        //no second treasure_map found in hand
    #####: 1342:        return -1;
        -: 1343:    }
        -: 1344:
    #####: 1345:    return -1;
        -: 1346:}
        -: 1347:
        -: 1348:
        -: 1349:
function discardCard called 113 returned 100% blocks executed 89%
      113: 1350:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1351:{
        -: 1352:
        -: 1353:    //if card is not trashed, added to Played pile
      113: 1354:    if (trashFlag < 1)
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -: 1355:    {
        -: 1356:        //add card to played pile
       99: 1357:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       99: 1358:        state->playedCardCount++;
        -: 1359:    }
        -: 1360:
        -: 1361:    //set played card to -1
      113: 1362:    state->hand[currentPlayer][handPos] = -1;
        -: 1363:
        -: 1364:    //remove card from player's hand
      113: 1365:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1366:    {
        -: 1367:        //reduce number of cards in hand
       14: 1368:        state->handCount[currentPlayer]--;
        -: 1369:    }
       99: 1370:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1371:    {
        -: 1372:        //reduce number of cards in hand
    #####: 1373:        state->handCount[currentPlayer]--;
        -: 1374:    }
        -: 1375:    else
        -: 1376:    {
        -: 1377:        //replace discarded card with last card in hand
       99: 1378:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1379:        //set last card to -1
       99: 1380:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1381:        //reduce number of cards in hand
       99: 1382:        state->handCount[currentPlayer]--;
        -: 1383:    }
        -: 1384:
      113: 1385:    return 0;
        -: 1386:}
        -: 1387:
function gainCard called 43 returned 100% blocks executed 80%
       43: 1388:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1389:{
        -: 1390:    //Note: supplyPos is enum of choosen card
        -: 1391:
        -: 1392:    //check if supply pile is empty (0) or card is not used in game (-1)
       43: 1393:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1394:    {
    #####: 1395:        return -1;
        -: 1396:    }
        -: 1397:
        -: 1398:    //added card for [whoseTurn] current player:
        -: 1399:    // toFlag = 0 : add to discard
        -: 1400:    // toFlag = 1 : add to deck
        -: 1401:    // toFlag = 2 : add to hand
        -: 1402:
       43: 1403:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1404:    {
    #####: 1405:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1406:        state->deckCount[player]++;
        -: 1407:    }
       43: 1408:    else if (toFlag == 2)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1409:    {
        1: 1410:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1411:        state->handCount[player]++;
        -: 1412:    }
        -: 1413:    else
        -: 1414:    {
       42: 1415:        state->discard[player][ state->discardCount[player] ] = supplyPos;
       42: 1416:        state->discardCount[player]++;
        -: 1417:    }
        -: 1418:
        -: 1419:    //decrease number in supply pile
       43: 1420:    state->supplyCount[supplyPos]--;
        -: 1421:
       43: 1422:    return 0;
        -: 1423:}
        -: 1424:
function updateCoins called 11 returned 100% blocks executed 82%
       11: 1425:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1426:{
        -: 1427:    int i;
        -: 1428:
        -: 1429:    //reset coin count
       11: 1430:    state->coins = 0;
        -: 1431:
        -: 1432:    //add coins for each Treasure card in player's hand
       66: 1433:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1434:    {
       55: 1435:        if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1436:        {
       33: 1437:            state->coins += 1;
        -: 1438:        }
       22: 1439:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1440:        {
    #####: 1441:            state->coins += 2;
        -: 1442:        }
       22: 1443:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1444:        {
    #####: 1445:            state->coins += 3;
        -: 1446:        }
        -: 1447:    }
        -: 1448:
        -: 1449:    //add bonus
       11: 1450:    state->coins += bonus;
        -: 1451:
       11: 1452:    return 0;
        -: 1453:}
        -: 1454:
        -: 1455:
        -: 1456://end of dominion.c
        -: 1457:
